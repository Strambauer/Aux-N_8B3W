# This file servers as a template to use when starting a new IsoAgLib project
# Make a copy of this file and adapt it to your needs: Set mandatory values
# and activate some commented-out options (if needed)...
#
# The steps are:
#  [0. On Windows, have MSYS/MinGW installed.]
#   1. Copy conf_template -> conf_<PROJECTNAME>
#   2. Setup your wanted IsoAgLib configuration here
#   3. Create your application files (these will be collected by conf2build.sh)
#   4. Run "<PATH_TO_bin>/conf2build.sh conf_<PROJECTNAME>"
#       in your native Linux or MSYS/MinGW Windows shell to get the generated project


# ###############################################################
# Project Identification
# ###############################################################

# Project name - used for directory with make-/project-file
PROJECT=Aux-N_8B3W


# ###############################################################
# Main IsoAgLib Path
# ###############################################################

# Path to IsoAgLib's main directory (where "library" is located in)
# relative to the directory from which "update_makefile.sh conf_<PROJECTNAME>" is called.
ISO_AG_LIB_PATH="../../IsoAgLib"


# ###############################################################
# Selection of Application Sources
# ###############################################################
#
# NOTE: If building IsoAgLib purely as a library
#       then you'll have to leave out all of the following settings in this part 

# Base Path(es) to the application's sources.
# Defaults to ISO_AG_LIB_PATH if it is not set!
# (separate multiple directories by whitespace)
APP_PATH=".."

# Path(es) to the application files
# relative to APP_PATH
# (separate multiple directories by whitespace)
REL_APP_PATH="src inc object_pool"

# Filename of the application
# If not set, all files of the selected directories are collected
# (separate multiple files by whitespace)
#APP_SRC_FILE="main.cpp CmyIdentDataStorage.cpp CmyIdentDataStorage.hpp"

# File extensions to include for the application source file search
# (default: Sources: "*.c *.cc *.cpp" - Headers: "*.h *.hpp")
APP_SEARCH_SRC_CONDITION="*.cc *.c *.cpp"
APP_SEARCH_HDR_CONDITION="*.h *.hpp"

# Pathes which shall be excluded from the application file search
# (wildcards like "*" are allowed) 
# Example:
#    - exclude path Foo somewhere in deep dir: ".../Foo/..."
#    - exclude file Bar.cpp as part of directory Foo: ".../Foo/Bar.cpp"
#      (includes occurences of Foo.cpp in other directories!!)
# APP_PATH_EXLCUDE=""

# Filenames which shall be excluded in all directories
# (wildcards like "*" are allowed)
# Example: "test*.cpp"
# APP_SRC_EXCLUDE=""

# Additional Include pathes relative to the IsoAgLib-path.
# (directories of REL_APP_PATH are already integrated into the compiler list of header
#  include search paths - Absolute include paths to external directories should be
#  defined in config variables like:
#   - USE_WIN32_EXTERNAL_INCLUDE_PATH, USE_LINUX_EXTERNAL_INCLUDE_PATH, USE_EMBED_HEADER_DIRECTORY)
# (separate multiple directories by whitespace)
#PRJ_INCLUDE_PATH=""


# ###############################################################
# Selection of Basic Project Settings
# ###############################################################

# Optionally set individual PROJECT-DEFINES
# (separate multiple defines by whitespace)
# PRJ_DEFINES=""

# Optionally set individual ISOAgLib switches
# - DEBUG for different internal IsoAgLib information
# Also available to be used:
# - ENABLE_MULTIPACKET_VARIANT_FAST_PACKET
# - ENABLE_NMEA_2000_MULTI_PACKET
# - and so on...
# (separate multiple defines by whitespace)
ISOAGLIB_SWITCHES="DEBUG ENABLE_MULTIPACKET_VARIANT_FAST_PACKET"

# Optionally replace the compiler flag default values by configured ones.
# Only valid for Linux Makefile generation currently.
# RULE_CXXFLAGS='-pipe -O -Wall -g -Wextra -Winit-self -Wmissing-include-dirs -fno-builtin -fno-exceptions -Wshadow -Wcast-qual -Wcast-align -Woverloaded-virtual -Wpointer-arith $($F PROJ_DEFINES)'

# Select if HEAP usage should reduce size in favour of speed
# (default: maximize speed, which costs about 10KByte more HEAPSIZE,
#           but avoids slow memory allocation in too small units)
# OPTIMIZE_HEAPSIZE_IN_FAVOR_OF_SPEED=0


# ###############################################################
# Basic Hardware Setup
# ###############################################################

# Select type of target system:
#   Host:        "pc_linux" | "pc_win32"
#   Embedded:    "c2c" | "esx" | "esxu" | "p1mc"
#   Proprietary:  any other name than the above ones
USE_TARGET_SYSTEM="pc_linux"

# Specify the path to the proprietary HALs
# in case a proprietary HAL is selected above in USE_TARGET_SYSTEM
# (Note: A directory '$USE_HAL_PATH/$USE_TARGET_SYSTEM' must then exist,
#  including the subdirectories 'system', 'can', 'eeprom' and optionally
#  'rs232', 'sensor', 'actor' and/or 'datastreams'.
#  Please add this path to PRJ_INCLUDE_PATH if it's not already part of it)
# USE_HAL_PATH=""

# Select wanted type of CAN driver connection:
# embedded targets: "sys"
# pc_win32 targets: "simulating" | "socket_server" | "socket_server_hal_simulator"
# pc_linux targets: "simulating" | "socket_server" | "msq_server" | "sys"
USE_CAN_DRIVER="sys"

# Define the amount of CAN instances to support
# ( all values lower than 1 are overwritten by default 1 )
CAN_INSTANCE_CNT=1

# Define the amount of ISOBUS protocol instances
# ( needs to be less than or equal to CAN_INSTANCE_CNT.
#   The CAN Instances [0..PRT_INSTANCE_CNT-1] are treated as ISOBUS then )
PRT_INSTANCE_CNT=1


# ###############################################################
# Core Communication Setup 
# ###############################################################
# Set value of feature to 1 if wanted - unset or set to 0 if not wanted

### General Setup
#################

# Specify if Part 3 - Data Link Layer: Basic ISOBUS Protocol is enabled.
PRJ_ISO11783=1

# Specify if Part 3 - Proprietary Messages (via Proprietary PGNs) is enabled.
# PRJ_PROPRIETARY_PGN_INTERFACE=1

# Specify if Part 6 - VT-Client support is enabled.
PRJ_ISO_VIRTUALTERMINAL_CLIENT=1

# Specify if Part 10 - TC-Client support is enabled.
#PRJ_ISO_TASKCONTROLLER_CLIENT=1

# Specify if Part 12 - Diagnostic Services is enabled.
# Note: This is currently always added to IsoAgLib as it is mandatory now.

# Specify if Part 13 - FS-Client support is enabled.
# PRJ_ISO_FILESERVER_CLIENT=1

# Specify if Part 7 - tractor hitch, RPM and Key Switch information support is enabled.
# NOTE: To use the Key Switch information, also enable PRJ_TRACTOR_MOVE
# PRJ_TRACTOR_GENERAL=1
#PRJ_TRACTOR=1
#PRJ_TRACTOR_MACHINE_SELECTED=1
#PRJ_TRACTOR_REAR_HITCH=1
#PRJ_TRACTOR_FRONT_HITCH=1

# Specify if Part 7 - tractor moving (distance, speed, direction, ...) information support is enabled.
# PRJ_TRACTOR_MOVE=1
#PRJ_TRACTOR_GROUND_BASED=1

# Specify if Part 7 - tractor move commands support is enabled.
# PRJ_TRACTOR_MOVE_SETPOINT=1

# Specify if Part 7 - tractor PTO information support is enabled.
# PRJ_TRACTOR_PTO=1
#PRJ_TRACTOR_REAR_PTO=1
#PRJ_TRACTOR_FRONT_PTO=1

# Specify if Part 7 - tractor PTO commands support is enabled.
# PRJ_TRACTOR_PTO_SETPOINT=1

# Specify if Part 7 - tractor lighting information support is enabled.
# PRJ_TRACTOR_LIGHT=1
#PRJ_TRACTOR_LIGHTING=1

# Specify if Part 7 - tractor auxiliary valve information support is enabled.
#PRJ_TRACTOR_AUX=1

# Specify if Part 7 - LEGACY time and GPS information (subject to be removed!) support is enabled.
# Please use PRJ_TIME_DATE and/or PRJ_GNSS instead!
# PRJ_TIME_GPS=1

# Specify if Part 7 - time and date information support is enabled.
# (Please don't use in combination with PRJ_TIME_GPS!)
#PRJ_TIME_DATE=1

# Specify if Part 7 - GNSS Position, Direction, UTC Date and Time information support is enabled.
# (Please don't use in combination with PRJ_TIME_GPS!)
#PRJ_GNSS=1

# Specify if Part 7 - tractor guidance information support is enabled.
# PRJ_TRACTOR_GUIDANCE=1

# Specify if Part 7 - ISB support is enabled.
# PRJ_ISB_CLIENT=1

### Special Setup / Customization / Optimization
##############################################

# Specify Part 3 - Data Link Layer: Transport Protocol stream receive strategy:
# chunk (default): use list of chunks where each receive burst is stored in one chunk -> useful when on-the-fly parsing is used
#                  and thereby less HEAP has to be used for storage
#                  -> let PRJ_MULTIPACKET_STREAM_CHUNK stay commented out, or set to 1
# linear         : if only final parsing is used, then chunk handling can't reduce HEAP usage, so that simpler linear buffer can be used
#                  -> set  PRJ_MULTIPACKET_STREAM_CHUNK to 0
# PRJ_MULTIPACKET_STREAM_CHUNK=1

# Specify if Part 6 - VT-Client should be size optimized
#                     (leaves out unneeded object-type implementations)
# The following defines can be set to "<PATH>/<OBJECTPOOLPROJECT_NAME>-objectselection.inc"
# files created by vt2iso to specify which objects are NOT part of the object pool(s)
# and thus need not be included in IsoAgLib's VT-Client module.
PRJ_ISO_TERMINAL_OBJECT_SELECTION1="PowerBauer_AuxN-objectselection.inc"
# PRJ_ISO_TERMINAL_OBJECT_SELECTION2="<ANOTHER_POOL>-objectselection.inc"
# PRJ_ISO_TERMINAL_OBJECT_SELECTION3="<ANOTHER_POOL>-objectselection.inc"
# PRJ_ISO_TERMINAL_OBJECT_SELECTION4="<ANOTHER_POOL>-objectselection.inc"


# ###############################################################
# Optional Driver Selection
# ###############################################################

# select if support for EEPROM access should be enabled.
# PRJ_EEPROM=1

# Select wanted type of EEPROM driver connection:
# embedded targets: "sys"
# pc targets: "simulating" | "hal_simulator"
# USE_EEPROM_DRIVER="simulating"

# select if the datastreams from HAL for file input and output shall be used
# PRJ_DATASTREAMS=1

# select iRS232IO_c for RS232 output which can be used like the
# standard C++ iostreams
# PRJ_RS232=1

# Define the amount of available RS232 channels at the ECU
# ( default 1 )
# RS232_CHANNEL_CNT=1

# Define the amount of RS232 instances to support
# ( all values lower than 1 are overwritten by default 1 )
# This is especially important if your ECU has more than one RS232 channel
# and you intend to use more than one RS232 channel at the same time.
# RS232_INSTANCE_CNT=1

# Select wanted type of RS232 driver connection:
# embedded targets: "sys"
# pc_win32 targets: "sys" | "simulating" | "hal_simulator"
# pc_linux targets: "sys" | "simulating" | "hal_simulator" | "rte"
# USE_RS232_DRIVER="simulating"

# select special RS232 virtual driver HAL for RS232_over_CAN
# PRJ_RS232_OVER_CAN=1

# Select wanted type of INPUTS/OUTPUTS driver connection:
# embedded targets: "sys"
# pc targets: "simulating" | "hal_simulator"
# USE_INPUTS_DRIVER="simulating"
# USE_OUTPUTS_DRIVER="simulating"

# select iDigitalO_c ( one instance/variable of this class per channel )
# for digital On/Off input
# ( provides automatic range check which uses diagnose function of HAL
#  - BIOS/OS - to check if current is in allowed interval );
# use iActorO_c for global access to all active iDigitalO_c instances
# PRJ_INPUTS_DIGITAL=1

# select iAnalogI_c for analog ( current or voltage ) sensor input.
# or iAnalogIRangeCheck_c with enhanced automatic range check
# PRJ_INPUTS_ANALOG=1

# select iCounterI_c for counter input.
# the existing HAL implementations ( e.g. for ESX ) extend the BIOS/OS
# function, as a IsoAgLib specific event counting for very low
# event repetition rates is provided - the BIOS version is only
# designed for typical RPM values
# PRJ_INPUTS_COUNTER=1

# select if the digital output driver shall be integrated into the project.
# you can then use the HAL of IsoAgLib to realize a mostly hardware independend
# access on PWM output. This is completely independent from communication tasks.
# PRJ_OUTPUTS=1


# ###############################################################
# Build System Configuration for LINUX
# ###############################################################

# The libraries (headers and library files) can be
# installed with "make install_library" to a global system
# directory, so that applications can be compiled with
# refering to a general system path like "/usr/local/include"
# and "/usr/local/lib".
# ISOAGLIB_INSTALL_PATH="/usr/local/"


# ###############################################################
# Build System Configuration for Cross Compilers (like Tasking EDE)
# ###############################################################

# #############################################
# Configuration options typical for embedded projects
# where the system libraries aren't placed in standard
# directories ( UNIX/LINUX has standard directories
# /usr/include, /usr/local/include, /usr/lib
# and /usr/local/lib -> IsoAgLib awaits the libraries
# in this directories for UNIX/LINUX )
# These settings are at the moment only used for project
# generation of
# + Tasking EDE
#
# But this could be extended to other compilers.
# These config settings allow to create project files
# which can be used to generate runnable HEX out of the
# box from automatic generation
# #############################################

# SETTINGS FOR EMBEDDED PROJECTS WITHIN CROSS COMPILER
# specify the path to the embedded compiler
# USE_EMBED_COMPILER_DIR="c:/programme/tasking/7.56/c166"

# specify the path ( relative to IsoAgLib root or absolute )
# to the libraries of the embedded BIOS / OS
# ( please seperate entries by whitespace )
# USE_EMBED_LIB_DIRECTORY="library/commercial_BIOS/bios_esx"

# specify the path ( relative to IsoAgLib root or absolute )
# to the headers of the embedded BIOS / OS
# ( please seperate entries by whitespace )
# USE_EMBED_HEADER_DIRECTORY="library/commercial_BIOS/bios_esx"

# specify the needed library files
# ( please seperate entries by whitespace )
# USE_EMBED_LIBS="C756/Xos20l.lib Module/Xma20l.lib"

# specify special source files from the BIOS/OS
# which must be inserted into the sources list
# ( e.g. startup files which could be delivered as
#   asm file and must be compiled during runtime,
#   as the BIOS/OS allows there some individual adaptation )
# ( please seperate entries by whitespace )
# USE_EMBED_BIOS_SRC="Xos20go.asm Xos20err.c xos20esx.h XOS20EEC.H XOS20EEC.OBJ"

# specify the needed linker / locater control file
# USE_EMBED_ILO="Xos20lcs.ilo"


# ###############################################################
# Build System Configuration for Win32 (Visual C++)
# ###############################################################

# include directory for external libraries in windows
# USE_WIN32_EXTERNAL_INCLUDE_PATH=""

# library directory for external libraries in windows
# USE_WIN32_EXTERNAL_LIBRARY_PATH=""

# ###############################################################
# Build System Configuration for gcc based cross compilers and the like
# ###############################################################

# typical development systems have a host compiler version of gcc
# in the application execution path as "gcc".
# the appropriate cross-compiler gcc is often placed in a separate directory
# with a special prefix. This can be specified by PRJ_COMPILER_BINARY_PRE
# PRJ_COMPILER_BINARY_PRE="/opt/hardhat/devkit/arm/xscale_le/bin/xscale_le-"

# include directory for external libraries in Linux (or general: Makefile based builds)
# USE_LINUX_EXTERNAL_INCLUDE_PATH=""

# library directory for external libraries in Linux (or general: Makefile based builds
# USE_LINUX_EXTERNAL_LIBRARY_PATH=""

# additional libs when using Linux (or general: Makefile based builds
# USE_LINUX_EXTERNAL_LIBRARIES=""


